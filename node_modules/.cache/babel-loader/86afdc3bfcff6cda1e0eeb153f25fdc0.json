{"ast":null,"code":"var _jsxFileName = \"/home/neosoft/LearnFromHome/src/pages/Registration.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Button, Container } from 'react-bootstrap';\nimport { Row, Col } from 'react-bootstrap';\nimport '../assets/css/Registration.css';\nimport Inputs from '../components/Inputs';\nimport { RegEx } from '../assets/constants/RegEx';\nimport { postUserInfo } from '../actions/registrationAction';\nimport { connect } from 'react-redux';\nlet valid = true;\nlet forbutton;\n\nconst validateForm = users => {\n  console.log(\"in validateForm\");\n  Object.values(users).forEach(val => {\n    if (val === '') {\n      valid = false;\n    } else {\n      valid = true;\n    }\n  });\n  return valid;\n};\n\nclass Registration extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      event.preventDefault();\n      const {\n        name,\n        value\n      } = event.target;\n      let userInfo = this.state.userInfo;\n      let errors = this.state.errors;\n\n      switch (name) {\n        case 'FirstName':\n          if (value === '') {\n            errors.firstName = 'required';\n          } else if (!RegEx.Name.test(value)) {\n            errors.firstName = \"Only alphabates are allowed\";\n          } else {\n            userInfo.firstName = value;\n            errors.firstName = '';\n          }\n\n          break;\n\n        case 'LastName':\n          if (value === '') {\n            errors.lastName = 'Required';\n          } else if (!RegEx.Name.test(value)) {\n            errors.lastName = \"Only alphabates are allowed\";\n          } else {\n            userInfo.lastName = value;\n            errors.lastName = \"\";\n          }\n\n          break;\n\n        case 'EmailId':\n          if (value === '') {\n            errors.email = \"Required\";\n          } else if (!RegEx.Email.test(value)) {\n            errors.email = \"Only alphabates are allowed\";\n          } else {\n            userInfo.email = value;\n            errors.email = '';\n          }\n\n          break;\n\n        case 'Username':\n          if (value === '') {\n            errors.username = \"Required\";\n          } else {\n            userInfo.username = value;\n            errors.username = '';\n          }\n\n          break;\n\n        case 'Password':\n          if (value === '') {\n            errors.password = \"Required\";\n          } else if (!RegEx.Password.test(value)) {\n            errors.password = \"Only alphabates are allowed\";\n          } else {\n            userInfo.password = value;\n            errors.password = \"\";\n          }\n\n          break;\n\n        case 'ConfirmPassword':\n          if (value === '') {\n            errors.confirmPassword = \"Required\";\n          } else if (userInfo.password !== value) {\n            errors.confirmPassword = \"Password is missmatch\";\n          } else {\n            errors.confirmPassword = '';\n            userInfo.confirmPassword = value;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        errors,\n        userInfo\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      console.log(\"in handle submit\");\n\n      if (validateForm(this.state.userInfo)) {\n        forbutton = true;\n        this.setState({\n          submitError: ''\n        });\n        this.props.postUserInfo(this.state.userInfo);\n      } else {\n        forbutton = false;\n        this.setState({\n          submitError: \"Enter values\"\n        }); // console.log(\"Invalid form\",\"forbutton:\",forbutton);\n        // alert(\"enter all fields\");\n      }\n    };\n\n    this.state = {\n      userInfo: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        username: '',\n        password: '',\n        confirmPassword: ''\n      },\n      errors: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        username: '',\n        password: '',\n        confirmPassword: ''\n      },\n      submitError: ''\n    };\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    const years = [];\n    let date = new Date();\n\n    for (let i = 1980; i <= date.getFullYear(); i++) {\n      years.push( /*#__PURE__*/React.createElement(\"option\", {\n        value: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 24\n        }\n      }, \" \", i, \" \"));\n    }\n\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"reg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"regWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }\n    }, \" Registration \"), /*#__PURE__*/React.createElement(Card, {\n      className: \"regWrapperCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"regWrapperForm\",\n      onSubmit: this.handleSubmit,\n      action: \"./LogIn.js\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Inputs, {\n      label: \"First Name\",\n      name: \"FirstName\",\n      type: \"text\",\n      placeholder: \"First Name\",\n      handleChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 28\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"errorSpan\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 29\n      }\n    }, errors.firstName), /*#__PURE__*/React.createElement(Inputs, {\n      label: \"Last Name\",\n      name: \"LastName\",\n      type: \"text\",\n      placeholder: \"Last Name\",\n      handleChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"errorSpan\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 29\n      }\n    }, errors.lastName), /*#__PURE__*/React.createElement(Inputs, {\n      label: \"Email Id\",\n      name: \"EmailId\",\n      type: \"email\",\n      placeholder: \"Email Id\",\n      handleChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"errorSpan\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 29\n      }\n    }, errors.email), /*#__PURE__*/React.createElement(Inputs, {\n      label: \"Username\",\n      name: \"Username\",\n      type: \"text\",\n      placeholder: \"UserName\",\n      handleChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"errorSpan\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 29\n      }\n    }, errors.username), /*#__PURE__*/React.createElement(Inputs, {\n      label: \"Password\",\n      name: \"Password\",\n      type: \"password\",\n      placeholder: \"Password\",\n      handleChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"errorSpan\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 29\n      }\n    }, errors.password), /*#__PURE__*/React.createElement(Inputs, {\n      label: \"Confirm Password\",\n      name: \"ConfirmPassword\",\n      type: \"password\",\n      placeholder: \"Confirm Password\",\n      style: {\n        marginBottom: '50px'\n      },\n      handleChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 28\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"errorSpan\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 29\n      }\n    }, errors.confirmPassword), /*#__PURE__*/React.createElement(Inputs, {\n      label: \"Phone No\",\n      name: \"PhoneNo\",\n      type: \"number\",\n      placeholder: \"Phone No\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"errorSpan\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 29\n      }\n    }, errors.confirmPassword), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"submitButton\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 33\n      }\n    }, \"Submit\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"errorSpan\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 29\n      }\n    }, this.state.submitError)), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/LogIn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"loginButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 51\n      }\n    }, \"LogIn\"), \" \")))))))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  userData: state.userData\n});\n\nconst mapDispatchToProps = {\n  postUserInfo\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Registration);","map":{"version":3,"sources":["/home/neosoft/LearnFromHome/src/pages/Registration.js"],"names":["React","Link","Card","Button","Container","Row","Col","Inputs","RegEx","postUserInfo","connect","valid","forbutton","validateForm","users","console","log","Object","values","forEach","val","Registration","Component","constructor","props","handleChange","event","preventDefault","name","value","target","userInfo","state","errors","firstName","Name","test","lastName","email","Email","username","password","Password","confirmPassword","setState","handleSubmit","submitError","render","years","date","Date","i","getFullYear","push","marginBottom","mapStateToProps","userData","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Card, Button, Container } from 'react-bootstrap';\nimport {Row , Col} from 'react-bootstrap'\n\nimport '../assets/css/Registration.css';\nimport Inputs from '../components/Inputs';\nimport {RegEx} from '../assets/constants/RegEx';\nimport {postUserInfo}  from '../actions/registrationAction'\nimport { connect } from 'react-redux'\n\n\nlet valid = true;\nlet forbutton;\nconst validateForm = (users) => {\n    console.log(\"in validateForm\");\n    \n    Object.values(users).forEach(\n        (val) => {\n            if(val===''){valid = false;}\n            else{valid=true;}\n        }  \n    );\n    return valid;\n}\n class Registration extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            userInfo : {\n                firstName : '' ,\n                lastName : '' ,\n                email : '' ,\n                username : '',\n                password : '' ,\n                confirmPassword : ''\n            },\n            errors:{\n                firstName : '',\n                lastName : '',\n                email : '',\n                username : '',\n                password : '',\n                confirmPassword : '' \n            },\n            submitError:''\n\n        }\n    }\n    handleChange = (event) => {\n        event.preventDefault();\n        const { name , value } = event.target;\n        let userInfo = this.state.userInfo;\n        let errors = this.state.errors;\n        switch(name)\n        {\n            case 'FirstName' : \n                if(value === '')\n                {\n                    errors.firstName = 'required';\n                }\n                else if( !((RegEx.Name).test(value)) )\n                {\n                    errors.firstName =\"Only alphabates are allowed\";\n                }\n                else\n                {\n                    userInfo.firstName= value;\n                    errors.firstName = ''\n                }\n                break;\n            case 'LastName' :\n                if(value === '')\n                {\n                    errors.lastName = 'Required';\n                }\n                else if(!((RegEx.Name).test(value)) )\n                {\n                    errors.lastName = \"Only alphabates are allowed\";\n                }\n                else\n                {\n                    userInfo.lastName = value;\n                    errors.lastName = \"\";\n                }\n                break;\n            case 'EmailId':\n                if(value === '')\n                {\n                    errors.email = \"Required\";\n                }\n                else if(!((RegEx.Email).test(value)))\n                {\n                    errors.email = \"Only alphabates are allowed\"\n                }\n                else{\n                    userInfo.email = value;\n                    errors.email = '';\n                }\n                break;\n            case 'Username' :\n                if(value === '')\n                {\n                    errors.username = \"Required\";\n                }\n                else \n                {\n                    userInfo.username = value;\n                    errors.username = '';\n                }\n                break;\n            case 'Password' :\n                if(value === '')\n                {\n                    errors.password = \"Required\"\n                }\n                else if(!(RegEx.Password).test(value))\n                {\n                    errors.password = \"Only alphabates are allowed\"\n                }\n                else \n                {\n                    userInfo.password = value ;\n                    errors.password = \"\";\n                }\n                break;\n            case 'ConfirmPassword':\n                if (value === '')\n                {\n                    errors.confirmPassword = \"Required\";\n                }\n                else if (userInfo.password !== value)\n                {\n                    errors.confirmPassword = \"Password is missmatch\"\n                }\n                else \n                {\n                    errors.confirmPassword = '';\n                    userInfo.confirmPassword = value;\n                }\n                break;\n            default:\n                break;\n        }\n        this.setState({errors,userInfo})\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(\"in handle submit\");\n        if(validateForm(this.state.userInfo)){\n            forbutton=true;\n            this.setState({submitError:''});\n            this.props.postUserInfo(this.state.userInfo);\n          \n        }\n        else{\n            forbutton=false;\n            this.setState({submitError:\"Enter values\"});\n            // console.log(\"Invalid form\",\"forbutton:\",forbutton);\n            // alert(\"enter all fields\");\n        }\n    }\n    render()\n    {\n        const {errors} = this.state;\n        const years = [];\n        let date = new Date();\n        for(let i=1980 ; i<= date.getFullYear(); i++)\n        {\n            years.push(<option value={i}> {i} </option>)\n        }\n        return(\n            <section className=\"reg\">\n                <div className=\"regWrapper\">\n                    <h1> Registration </h1>\n                    <Card className=\"regWrapperCard\">\n                        <form className=\"regWrapperForm\" onSubmit={this.handleSubmit} action=\"./LogIn.js\">\n                           <Inputs \n                                label=\"First Name\"  \n                                name=\"FirstName\" \n                                type=\"text\" \n                                placeholder=\"First Name\"\n                                handleChange = {this.handleChange}\n                            />\n                            <span className=\"errorSpan\">{errors.firstName}</span>\n                            <Inputs \n                                label=\"Last Name\" \n                                name=\"LastName\" \n                                type=\"text\" \n                                placeholder=\"Last Name\" \n                                handleChange = {this.handleChange}\n                            />\n                            <span className=\"errorSpan\">{errors.lastName}</span>\n                            <Inputs \n                                label=\"Email Id\" \n                                name=\"EmailId\" \n                                type=\"email\" \n                                placeholder=\"Email Id\" \n                                handleChange = {this.handleChange}\n                            /> \n                            <span className=\"errorSpan\">{errors.email}</span>\n                            <Inputs \n                                label=\"Username\" \n                                name=\"Username\" \n                                type=\"text\" \n                                placeholder=\"UserName\" \n                                handleChange = {this.handleChange}\n                            />\n                            <span className=\"errorSpan\">{errors.username}</span>\n                            <Inputs \n                                label=\"Password\" \n                                name=\"Password\" \n                                type=\"password\" \n                                placeholder=\"Password\" \n                                handleChange = {this.handleChange}\n                            />\n                            <span className=\"errorSpan\">{errors.password}</span>\n                           <Inputs \n                                label=\"Confirm Password\" \n                                name=\"ConfirmPassword\" \n                                type=\"password\" \n                                placeholder=\"Confirm Password\" \n                                style={{marginBottom : '50px'}}\n                                handleChange = {this.handleChange}\n                            />\n                            <span className=\"errorSpan\">{errors.confirmPassword}</span>\n                            <Inputs\n                                label=\"Phone No\"\n                                name=\"PhoneNo\"\n                                type=\"number\"\n                                placeholder=\"Phone No\"\n                            />\n                            <span className=\"errorSpan\">{errors.confirmPassword}</span>\n                            \n                            <div>\n                                <Container>\n\n                                <Row>\n                                <Col>\n                                <button  className=\"submitButton\" type=\"submit\">Submit</button>\n                            <span className=\"errorSpan\">{this.state.submitError}</span>\n                                </Col>\n                                <Col>\n                                <Link to='/LogIn'><Button className=\"loginButton\">LogIn</Button> </Link>\n\n                                </Col>\n                            </Row>\n                                </Container>\n                            \n                            </div>\n                        </form>\n                    </Card>\n                </div>\n            </section>\n        )\n    }\n}\nconst mapStateToProps = state => ({\n    userData: state.userData\n  });\n\n  const mapDispatchToProps = {\n    postUserInfo\n};\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Registration);"]},"metadata":{},"sourceType":"module"}